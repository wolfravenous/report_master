diff --git a/app/assets/javascripts/units.coffee b/app/assets/javascripts/units.coffee
new file mode 100644
index 0000000..24f83d1
--- /dev/null
+++ b/app/assets/javascripts/units.coffee
@@ -0,0 +1,3 @@
+# Place all the behaviors and hooks related to the matching controller here.
+# All this logic will automatically be available in application.js.
+# You can use CoffeeScript in this file: http://coffeescript.org/
diff --git a/app/assets/stylesheets/units.scss b/app/assets/stylesheets/units.scss
new file mode 100644
index 0000000..a7de626
--- /dev/null
+++ b/app/assets/stylesheets/units.scss
@@ -0,0 +1,3 @@
+// Place all the styles related to the units controller here.
+// They will automatically be included in application.css.
+// You can use Sass (SCSS) here: http://sass-lang.com/
diff --git a/app/controllers/units_controller.rb b/app/controllers/units_controller.rb
new file mode 100644
index 0000000..c6143b4
--- /dev/null
+++ b/app/controllers/units_controller.rb
@@ -0,0 +1,39 @@
+class UnitsController < ApplicationController
+  before_action :set_subject
+  before_action :set_unit, only: [:show, :edit, :update, :destroy]
+
+  def new
+    @unit = @subject.units.build
+  end
+
+  def show
+    # via before_action :set_unit
+  end
+
+  def create
+    @unit = @subject.units.build(unit_params)
+
+    if @unit.save
+      flash[:notice] = "Unit has been created."
+      redirect_to [@subject, @unit]
+    else
+      flash.now[:alert] = "Unit has not been created."
+      render "new"
+    end
+  end
+
+private
+
+  def unit_params
+    params.require(:unit).permit(:title, :content)
+  end
+
+  def set_subject
+    @subject = Subject.find(params[:subject_id])
+  end
+
+  def set_unit
+    @unit = @subject.units.find(params[:id])
+  end
+
+end
diff --git a/app/helpers/units_helper.rb b/app/helpers/units_helper.rb
new file mode 100644
index 0000000..d8b2f3f
--- /dev/null
+++ b/app/helpers/units_helper.rb
@@ -0,0 +1,2 @@
+module UnitsHelper
+end
diff --git a/app/models/subject.rb b/app/models/subject.rb
index ffea04a..e65f4f1 100644
--- a/app/models/subject.rb
+++ b/app/models/subject.rb
@@ -1,7 +1,10 @@
 class Subject < ActiveRecord::Base
 
   # Associations
-  has_many :reports
+  # The dependent restriction prevents subjects from being deleted that contain reports
+  has_many :reports, dependent: :restrict_with_error
+
+  has_many :units, dependent: :delete_all
 
   # Validations
   validates :name, presence: true
diff --git a/app/models/unit.rb b/app/models/unit.rb
new file mode 100644
index 0000000..439ae82
--- /dev/null
+++ b/app/models/unit.rb
@@ -0,0 +1,8 @@
+class Unit < ActiveRecord::Base
+  # Associations
+  belongs_to :subject
+
+  # Validations
+  validates :title, presence: true
+  validates :content, presence: true, length: { minimum: 10 }
+end
diff --git a/app/views/subjects/show.html.erb b/app/views/subjects/show.html.erb
index 29252f2..dff7eef 100644
--- a/app/views/subjects/show.html.erb
+++ b/app/views/subjects/show.html.erb
@@ -12,3 +12,11 @@
       class: "btn btn-danger" %></li>
   </ul>
 </header>
+
+<header>
+  <h2>Units</h2>
+  <ul class="actions">
+    <li><%= link_to "New Unit", new_subject_unit_path(@subject),
+      class: "new" %></li>
+  </ul>
+</header>
diff --git a/app/views/units/_form.html.erb b/app/views/units/_form.html.erb
new file mode 100644
index 0000000..f700e8c
--- /dev/null
+++ b/app/views/units/_form.html.erb
@@ -0,0 +1,6 @@
+<%= simple_form_for([subject, unit]) do |f| %>
+  <%= f.input :title %>
+  <%= f.input :content, as: :text %>
+
+  <%= f.button :submit, class: "btn-primary" %>
+<% end %>
diff --git a/app/views/units/new.html.erb b/app/views/units/new.html.erb
new file mode 100644
index 0000000..4919968
--- /dev/null
+++ b/app/views/units/new.html.erb
@@ -0,0 +1,8 @@
+<header>
+  <h1>
+    New Unit
+    <small><%= @subject.name %></small>
+  </h1>
+</header>
+
+<%= render "form", subject: @subject, unit: @unit %>
diff --git a/app/views/units/show.html.erb b/app/views/units/show.html.erb
new file mode 100644
index 0000000..7545449
--- /dev/null
+++ b/app/views/units/show.html.erb
@@ -0,0 +1,9 @@
+<div id="unit">
+  <header>
+    <h1><%= @subject.name %></h1>
+  </header>
+  <header>
+    <h2><%= @unit.title %></h2>
+</header>
+  <%= simple_format(@unit.content) %>
+</div>
diff --git a/config/routes.rb b/config/routes.rb
index 9488d0f..53e8e57 100644
--- a/config/routes.rb
+++ b/config/routes.rb
@@ -13,7 +13,11 @@ Rails.application.routes.draw do
 
   # Example resource route (maps HTTP verbs to controller actions automatically):
   #   resources :products
-  resources :reports, :subjects
+  resources :reports
+
+  resources :subjects do
+    resources :units
+  end
   # Example resource route with options:
   #   resources :products do
   #     member do
diff --git a/db/migrate/20160909161238_create_units.rb b/db/migrate/20160909161238_create_units.rb
new file mode 100644
index 0000000..6da4288
--- /dev/null
+++ b/db/migrate/20160909161238_create_units.rb
@@ -0,0 +1,11 @@
+class CreateUnits < ActiveRecord::Migration
+  def change
+    create_table :units do |t|
+      t.string :title
+      t.text :content
+      t.references :subject, index: true, foreign_key: true
+
+      t.timestamps null: false
+    end
+  end
+end
diff --git a/db/schema.rb b/db/schema.rb
index b20e7ec..66df0b0 100644
--- a/db/schema.rb
+++ b/db/schema.rb
@@ -11,7 +11,7 @@
 #
 # It's strongly recommended that you check this file into your version control system.
 
-ActiveRecord::Schema.define(version: 20160909120357) do
+ActiveRecord::Schema.define(version: 20160909161238) do
 
   create_table "reports", force: :cascade do |t|
     t.string   "name"
@@ -33,4 +33,14 @@ ActiveRecord::Schema.define(version: 20160909120357) do
     t.datetime "updated_at", null: false
   end
 
+  create_table "units", force: :cascade do |t|
+    t.string   "title"
+    t.text     "content"
+    t.integer  "subject_id"
+    t.datetime "created_at", null: false
+    t.datetime "updated_at", null: false
+  end
+
+  add_index "units", ["subject_id"], name: "index_units_on_subject_id"
+
 end
diff --git a/spec/controllers/units_controller_spec.rb b/spec/controllers/units_controller_spec.rb
new file mode 100644
index 0000000..7d41e2c
--- /dev/null
+++ b/spec/controllers/units_controller_spec.rb
@@ -0,0 +1,5 @@
+require 'rails_helper'
+
+RSpec.describe UnitsController, type: :controller do
+
+end
diff --git a/spec/features/creating_units_spec.rb b/spec/features/creating_units_spec.rb
new file mode 100644
index 0000000..4fc5053
--- /dev/null
+++ b/spec/features/creating_units_spec.rb
@@ -0,0 +1,36 @@
+require "rails_helper"
+
+RSpec.feature "Users can create new units" do
+  before do
+    subject = FactoryGirl.create(:subject, name: "Biology")
+
+    visit subject_path(subject)
+    click_link "New Unit"
+  end
+
+  scenario "with valid attributes" do
+    fill_in "Title", with: "Unit-01"
+    fill_in "Content", with: "The stuff from the first unit in Biology."
+    click_button "Create Unit"
+
+    expect(page).to have_content "Unit has been created."
+  end
+
+  scenario "when providing invalid attributes" do
+    click_button "Create Unit"
+
+    expect(page).to have_content "Unit has not been created."
+    expect(page).to have_content "Title can't be blank"
+    expect(page).to have_content "Content can't be blank"
+  end
+
+  scenario "when providing invalid attributes" do
+    fill_in "Title", with: "Unit-01"
+    fill_in "Content", with: "shrt tex"
+    click_button "Create Unit"
+
+    expect(page).to have_content "Unit has not been created."
+    expect(page).to have_content "Content is too short"
+  end
+
+end
